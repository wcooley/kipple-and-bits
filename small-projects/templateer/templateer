#!/usr/bin/perl -w
#
# templateer - Automates processing of template files
#
#   Simply create
# 
# Written by Wil Cooley <wcooley@nakedape.cc>
#
# Copyright (C) 2004 Naked Ape Consulting, Ltd.
#

use warnings;
use strict;

my $query_only;
my $help_only;

my $template;
my $outfile;
my $key;
my %kwsubs;
my $kwre;
my @template;
my $needinput = 0;

if ($ARGV[0] and $ARGV[0] eq "-l") {
    $query_only = 1;
    shift @ARGV;
}

$help_only = 1 if($ARGV[0] eq "-h" or $ARGV[0] eq "--help");

$template = $ARGV[0];
$outfile = $ARGV[1] unless ($query_only);

if ((scalar(@ARGV) != 2) and (scalar(@ARGV) != 1) or $help_only) {
    print <<EOF;
Usage: templateer <template-file> <output-file>
       templateer -l <template-file>

templateer reads in <template-file>, extracts template variables, prompts
for values for the template variables, and writes the filled-in template
to <outfile>.

Template variables are variables surrounded on both sides with '\@\@'; e.g., 
\@\@HOSTNAME\@\@.

If given '-l', it lists template variables defined in <template-file>
and exits.

EOF
    exit 1;
}

if ($template eq "-") {
    *TEMPLATE = *STDIN;
    $template = "stdin";
}
else {
    open(TEMPLATE, $template) || die "Couldn't open $template!";
}

if ($outfile and $outfile ne '-') {
    open(OUTFILE, ">>$outfile") || die "Couldn't open $outfile!";
}
else {
    *OUTFILE = *STDOUT;
    $outfile = "stdout";
}


print STDERR "Reading template $template...\n";

# Extract the keywords to be substituted
while (<TEMPLATE>) {
    push @template, $_;

    while (m/[^\\]?@@([^@]+)@@/go) {
        $key = $1;

        if ($ENV{$key}) {
            $kwsubs{$key} = $ENV{$key};
        } 
        elsif ($template eq "stdin") {
            die "Error: Not all keys provided by environment in pipe mode!\n";
        }
        else {
            $kwsubs{$key} = '';
            $needinput = 1;
        }
    }
}

# "query only" mode allows you to list defined template variables
if ($query_only) {
    print "The template ${template} defines the following variables:\n";
    foreach $key (keys %kwsubs) {
        print "$key\n";
    }
    exit;
}

print STDERR "Kindly provide the values for the following template values:\n"
    if $needinput;

# Get the info from the user
foreach $key (keys %kwsubs) {
    unless ($kwsubs{$key}) {
        print STDERR "$key = ";
        chomp ($kwsubs{$key} = <STDIN>);
    }
    $kwre .= ($kwre) ? "|$key" : $key ;
}

print STDERR "Writing to $outfile...\n";
foreach my $l (@template) { 
    $l =~ s/([^\\]?)\\\@/$1\@/g;    # \@ => @

    if ($l =~ /\@\@(${kwre})\@\@/i) {
        foreach $key (keys %kwsubs) {
            $l =~ s/\@\@$key\@\@/$kwsubs{$key}/g;
        }
    } 
    print OUTFILE $l;
}

foreach $key (keys %kwsubs) {
    print STDERR "$key => $kwsubs{$key}\n";
}

close(TEMPLATE);
close(OUTFILE);
