#!/usr/bin/perl
#
# suck-ftp - Script to retrieve files from an FTP server and then deletes them from
#            the server.
#
# Written by Wil Cooley <wcooley@nakedape.cc>
#

use strict;
use warnings;
use English         qw( -no_match_vars );
use File::Basename  qw( basename );

package main;

our $VERSION    = 0.0001;
our $NAME       = basename($PROGRAM_NAME, qw( .pl .work .pl.work ));

if ($PROGRAM_NAME eq ($ENV{PAR_ARGV_0} || __FILE__)) {
    bin::suckFtp::main(@ARGV);
}

package bin::suckFtp;

use AppConfig       qw( :argcount );
use Cwd;
use Net::FTP::Simple;
use Pod::Usage;


sub main {
    my $config = setup_config();

    my $cwd_saved;

    if ( $config->output_dir() ) {

        $cwd_saved = getcwd();

        print "INFO: Changing to output directory '", 
                $config->output_dir(), "'.\n"
            if ($config->verbose());

        chdir $config->output_dir()
            or die "ERROR: Error changing to '", $config->output_dir(), "'";

    }

    if ( $config->verbose() ) {
        print "INFO: Logging in to FTP server '", 
            $config->server(), "' as user '",
            $config->username(), "'.\n";
        print "INFO: Retreiving files from directory '",
            $config->remote_dir(), "'\n";
    }

    my @received_files = Net::FTP::Simple->retrieve_files({
            username    => $config->username(),
            password    => $config->password(),
            server      => $config->server(),
            remote_dir  => $config->remote_dir(),
            debug_ftp   => $config->debug_ftp(),
            delete_after=> $config->delete_remote(),
            file_filter => qr/./,
        });

    if ($cwd_saved) {
        print "INFO: Restoring working directory '$cwd_saved'.\n"
            if ($config->verbose());
        chdir $cwd_saved
            or warn "WARN: Error changing to directory '$cwd_saved'";
    }

    if ( $config->verbose() ) {
        print "INFO: The following files were retrieved and deleted:\n",
            "INFO: FILE ",
            join("\nINFO: FILE ", @received_files), "\n";
    }

}



#######################################################################
#
# Subroutines
#
#######################################################################

#
# Process command line and configuration file options.  May be called with
# arguments for testing; defaults to @ARGV.
#
# getopt here gets called twice--once to get the config file and then again
# after the config file has been processed so that command-line options
# override config file options.
#
sub setup_config {
    my @args        = @_ ? @_ : @ARGV;
    my @args_saved  = @args;

    my $config = AppConfig->new(
        {
            CASE            => 1,
        },
        qw(
            config_file|config|c=s

            show_help|help|h!
            show_manual|man!
            show_version|version|V!
            debug_ftp!
            verbose|v!
            delete_remote|delete-remote!

            username=s
            password=s
            server=s
            remote_dir|remote-dir=s
            output_dir|output-dir=s
        )
    );

    # Parse the command-line options
    $config->getopt();

    pod2usage({
            -verbose    => 0,
            -exitval    => 0,
        }) if $config->show_help();

    pod2usage({
            -verbose    => 2,
            -exitval    => 0,
        }) if $config->show_manual();

    if ( $config->show_version() ) {
        print "$NAME version $VERSION\n";
        exit 0;
    }

    # Parse the options from the config file and command-line options
    if ( $config->config_file() ) {
        if ( -r $config->config_file() ) {
            $config->file( $config->config_file() );
            $config->getopt( \@args_saved );
        }
        else {
            die "ERROR: Unable to open config file '", $config->config_file(), "'.\n";
        }
    }

    return $config;

}

1;
__END__

=head1 NAME

suck-ftp - Retrieve and delete files via FTP.

=head1 SYNOPSIS

suck-ftp [options]

Retrieve and delete files via FTP.

 Options:
    --config <file> | -c <file>     Read settings from <file>.
    --version       | -V            Show version.
    --help          | -h            Display usage statement.
    --man                           Display full program manual.
    --verbose       | -v            Be verbose.

 FTP Retrieval Options:
    --username
    --password
    --server
    --remote-dir
    --output-dir
    --(no)delete-remote             Delete is default.

=head1 OPTIONS

=over 8

=item B< --config <file>>

Use configuration file <file>.  Command-line options can override parameters
in the configuration file.

=item B<--version>

Output version.

Not allowed in configuration file.

=item B<--help>

Output usage statement.

Not allowed in configuration file.

=item B<--man>

Output program manual.

Not allowed in configuration file.

=item B<--username>

FTP login username.

Allowed in configuration file.

=item B<--password>

FTP login password.

Allowed in configuration file.

=item B<--server>

FTP server.

Allowed in configuration file.

=item B<--remote-dir>

FTP remote directory to download from.

Allowed in configuration file as I<remote_dir>.

=item B<--output-dir>

Local destination for retrieved files.

Allowed in configuration file as I<output_dir>.

=item B<--(no)delete-remote>

Flag indicating whether or not to delete the remote files after downloading.
Viz., C<--nodelete-remote> disables deletion and C<--delete-remote> enables it.
The default it to not delete.

Allowed in configuration file as I<delete_remote> or one of several negations:
I<nodelete_remote>, I<delete_remote = no>, I<delete_remote no>.

=back

=head1 DESCRIPTION

C<suck-ftp> downloads all files from a directory on an FTP server and
deletes them.

=cut
